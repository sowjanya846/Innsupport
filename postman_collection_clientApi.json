{
	"id": "eec588d8-cb7f-f426-377e-bd2ceadc1449",
	"name": "ClientAPI",
	"description": "",
	"order": [
		"0fe51ade-fa58-625c-375f-b1430a3fc0cb",
		"00faf68b-54ab-34e8-661e-edb2765b6409",
		"9ebb94e3-97a4-cf75-67ec-1df439932843",
		"148f454b-7ae8-6cea-d90a-15b9461fa827",
		"1bcdf243-c891-9ee4-7458-9077e54a8b64",
		"4187e166-6cfe-ab2e-705b-4e4e1e5c8d8e",
		"2a2990fe-41f3-6e51-55d3-5d7928fb882c",
		"c6c05a51-9fdc-b082-a433-f472f83d5343",
		"609172d6-4dfd-5f85-275e-7ddebf7f7027",
		"22d3c67c-38f3-ae71-1a59-c234ae4f4238",
		"aabaf209-d332-45fc-5903-b4ddbb46e09d",
		"958f5c71-68b8-ec15-f28b-5c3476aa428c",
		"567743c6-ba43-c2a5-1e4d-ee7615e496d9",
		"d72834ed-b993-e77b-ab6a-143172c23975",
		"3f411489-f18f-c6c5-a979-ea9e739308de",
		"6aafd4e8-6e77-9fdc-9396-37e7cbd671c0",
		"dfd80586-fb41-e683-ca3a-7b9cee578cf4",
		"0c72a680-a337-9c22-99e4-1c6633af3ee8",
		"45e7aab9-0020-c820-22da-112ffbdfab61"
	],
	"folders": [],
	"timestamp": 0,
	"owner": "387807",
	"remoteLink": "",
	"public": false,
	"requests": [
		{
			"id": "00faf68b-54ab-34e8-661e-edb2765b6409",
			"headers": "Accept: application/json\n",
			"url": "{{Client_URI}}/client?offset={{offset2}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "//TC4:Validation for offset value (Second Request)\nvar jsonData=JSON.parse(responseBody);\nvar arrayOfClients=jsonData.data;\ntests[\"Test1: First Element with offset = 4 is same as fourth element with offset=0 : \"+environment.client_offset_4_value]=arrayOfClients[0].id==environment.client_offset_4_value;\n\n       \n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463419960576,
			"name": "IS29_TC2Validation_for_offset_2nd_request",
			"description": "",
			"collectionId": "eec588d8-cb7f-f426-377e-bd2ceadc1449"
		},
		{
			"id": "0c72a680-a337-9c22-99e4-1c6633af3ee8",
			"headers": "Accept: application/json\n",
			"url": "{{Client_URI}}/client?q=status=live",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "//--GET /client?q=status=live would not be allowed and the Response code will be 400 as Status is not currently in the response for this endpoint\n\ntests[\"Status code is \" +responseCode.code] = responseCode.code === 400;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1465826760798,
			"name": "ClientFilter_WhiteList{{Case_URI}}/client?q=status=live copy",
			"description": "",
			"collectionId": "eec588d8-cb7f-f426-377e-bd2ceadc1449"
		},
		{
			"id": "0fe51ade-fa58-625c-375f-b1430a3fc0cb",
			"headers": "Accept: application/json\nContent-Type: application/json\n",
			"url": "{{Client_URI}}/client?offset={{offset1}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "//TC:Validation for Response Code\ntests[\"Test1: Status code is 200\"] = responseCode.code === 200;\n\nvar jsonData=JSON.parse(responseBody);\nvar arrayOfClients=jsonData.data;\nvar clientSorted=jsonData.data;\n\n//TC2:Validation of Schema\nvar schema = {\n    \"type\":\"object\",\n            \"properties\":{\n        \"meta\":{\n        \"type\":\"object\"\n    },\n    \"data\":{\n        \"type\":\"array\",\n        \"items\":{\n        \"type\":\"object\",\n        \"properties\":{\n            \"id\":{\n                \"type\":\"string\",\n            },\n            \n        \"name\":{\n                \"type\":\"string\"\n            },\n        },\n        },\n        \n        },\n    },\n            \n           };\ntests[\"Test2: Response has the correct json schema\"] = tv4.validate(jsonData, schema);\n\n//TC3:Validation for limit\ntests[\"Test3: Default length is 25. Actual length is: \" + arrayOfClients.length ]=arrayOfClients.length<=25;\n\n//TC4:Validation for offset value(First Request)\nvar jsonData=JSON.parse(responseBody);\nvar arrayOfClients=jsonData.data;\npostman.setEnvironmentVariable(\"client_offset_4_value\", arrayOfClients[4].id);\n\n//TC5:Validation for Sorting order\n\n// Sorting Test TODO: May need to improve for charcter like \"-\", \".\"\nclientSorted.sort(function(a, b) { //ASC Name Sort\n  var nameA = a.name.toUpperCase(); // ignore upper and lowercase\n  var nameB = b.name.toUpperCase(); // ignore upper and lowercase\n  if (nameA < nameB) {\n    return -1;\n  }\n  if (nameA > nameB) {\n    return 1;\n  }\n  // names must be equal\n  return 0;\n});\n\n\nvar sorted  =  true;\n for  (var item=0;item<=arrayOfClients.length-1;item++) \n {\n       if(clientSorted[item].name.toUpperCase() != arrayOfClients[item].name.toUpperCase())\n   {\n     sorted = false;\n     tests[\"Test1: Sort failed. Element \" + item +\", \"+arrayOfClients[item].name + \", does not equal sorted value: \"+ clientSorted[item].name] = sorted;\n   }\n}\nif(sorted){\n    tests[\"Test1: Sort Passed\"]=sorted\n}\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463523953212,
			"name": "IS-29_TC1Validating All Test Cases",
			"description": "",
			"collectionId": "eec588d8-cb7f-f426-377e-bd2ceadc1449"
		},
		{
			"id": "148f454b-7ae8-6cea-d90a-15b9461fa827",
			"headers": "Accept: application/json\n",
			"url": "{{Client_URI}}/client?offset={{offset4}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "var jsonData=JSON.parse(responseBody);\r\nvar arrayOfClients=jsonData.data;\r\nif (environment.offset4>=1498)\r\n   tests[\"Test1: The array is empty. There are \"+arrayOfClients.length +\" Elements\" ]=arrayOfClients.length===0;\r\nelse \r\n    tests[\"Test1: There are \"+arrayOfClients.length +\" Elements\" ]=arrayOfClients.length;\r\n       \r\n\r\n\r\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463419982884,
			"name": "IS-107_TC2 Offset_value_exceeding_record_s_limit",
			"description": "",
			"collectionId": "eec588d8-cb7f-f426-377e-bd2ceadc1449"
		},
		{
			"id": "1bcdf243-c891-9ee4-7458-9077e54a8b64",
			"headers": "Accept: application/json\n",
			"url": "{{Client_URI}}/client?offset=four",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463419991341,
			"name": "IS_107_TC3Invalid_inputs_type_offset=<string> ",
			"description": "If parameters are invalid type (i.e. 'offset=ten'), return 400 response (invalid input)",
			"collectionId": "eec588d8-cb7f-f426-377e-bd2ceadc1449"
		},
		{
			"id": "22d3c67c-38f3-ae71-1a59-c234ae4f4238",
			"headers": "Accept: application/json\n",
			"url": "{{Client_URI}}/client?limit={{limit5}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "var jsonData=JSON.parse(responseBody);\r\nvar arrayOfClients=jsonData.data;\r\nif (environment.limit5>100)\r\n   tests[\"Test1: Test case : limit Greater than 100(max) / limit = \"+environment.limit5 + \" /Elements Returned :  \" + arrayOfClients.length ]=arrayOfClients.length == 100;\r\nelse if (environment.limit5 <=0)\r\n    tests[\"Test1: Test case : limit lesser than 1(min). \"+arrayOfClients.length ]=arrayOfClients.length == 25; \r\nelse \r\n    tests[\"Test1: Test case : Valid limit (limit : 1-100) \"+arrayOfClients.length ]=arrayOfClients.length == environment.limit5;\r\n\r\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463420042170,
			"name": "IS_107_TC8 limit_0",
			"description": "",
			"collectionId": "eec588d8-cb7f-f426-377e-bd2ceadc1449"
		},
		{
			"id": "2a2990fe-41f3-6e51-55d3-5d7928fb882c",
			"headers": "Accept: application/json\n",
			"url": "{{Client_URI}}/client?limit={{limit2}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "var jsonData=JSON.parse(responseBody);\r\nvar arrayOfClients=jsonData.data;\r\nif (environment.limit2>100)\r\n   tests[\"Test1: Test case : limit Greater than 100(max) / limit = \"+environment.limit2 + \" /Elements Returned :  \" + arrayOfClients.length ]=arrayOfClients.length == 100;\r\nelse if (environment.limit2 <=0)\r\n    tests[\"Test1: Test case : limit lesser than 1(min). \"+arrayOfClients.length ]=arrayOfClients.length == 25; \r\nelse \r\n    tests[\"Test1: Test case : Valid limit (limit : 1-100) \"+arrayOfClients.length ]=arrayOfClients.length == environment.limit2;\r\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463420013653,
			"name": "IS_107_TC5 limit_100",
			"description": "",
			"collectionId": "eec588d8-cb7f-f426-377e-bd2ceadc1449"
		},
		{
			"id": "3f411489-f18f-c6c5-a979-ea9e739308de",
			"headers": "Content-Type: application/json\nAccept: application/json\n",
			"url": "{{Client_URI}}/client/9999999/property",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "//TC 6 :Validation for Response Code 404 when an invalid client 12345 is not found\ntests[\"Test7 GET Property: Client ID is 404 not found\"] = responseCode.code === 404;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463517016672,
			"name": "IS-251_Properties_for_non_exisitng_client",
			"description": "",
			"collectionId": "eec588d8-cb7f-f426-377e-bd2ceadc1449",
			"responses": []
		},
		{
			"id": "4187e166-6cfe-ab2e-705b-4e4e1e5c8d8e",
			"headers": "Accept: application/json\n",
			"url": "{{Client_URI}}/client?limit={{limit1}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "var jsonData=JSON.parse(responseBody);\r\nvar arrayOfClients=jsonData.data;\r\nif (environment.limit1>100)\r\n   tests[\"Test1: Test case : limit Greater than 100(max) / limit = \"+environment.limit1 + \" /Elements Returned :  \" + arrayOfClients.length ]=arrayOfClients.length == 100;\r\nelse if (environment.limit1 <=0)\r\n    tests[\"Test1: Test case : limit lesser than 1(min). \"+arrayOfClients.length ]=arrayOfClients.length == 25; \r\nelse \r\n    tests[\"Test1: Test case : Valid limit (limit : 1-100) \"+arrayOfClients.length ]=arrayOfClients.length == environment.limit1;\r\n\r\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463420004468,
			"name": "IS_107_TC4 limit_25",
			"description": "",
			"collectionId": "eec588d8-cb7f-f426-377e-bd2ceadc1449"
		},
		{
			"id": "45e7aab9-0020-c820-22da-112ffbdfab61",
			"headers": "Accept: application/json\n",
			"url": "{{Client_URI}}/client?q=status=live",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "//--GET /client?q=status=live would not be allowed and the Response code will be 400 as Status is not currently in the response for this endpoint\n\ntests[\"Status code is \" +responseCode.code] = responseCode.code === 400;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1465826774654,
			"name": "ClientFilter_WhiteList{{Case_URI}}/client?q=status=live copy copy",
			"description": "",
			"collectionId": "eec588d8-cb7f-f426-377e-bd2ceadc1449"
		},
		{
			"id": "567743c6-ba43-c2a5-1e4d-ee7615e496d9",
			"headers": "Accept: application/json\n",
			"url": "{{Client_URI}}/client/{{clientId}}/property?sort=-id",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "//Get Client ID to use in other test\nvar arrayOfProperties=JSON.parse(responseBody);\nvar propertySorted=JSON.parse(responseBody);\n\n\n// Sorting Test TODO: May need to improve for charcter like \"-\", \".\"\npropertySorted.sort(function(a, b) { //DESC Search\n  var idA = a.id.toUpperCase(); // ignore upper and lowercase\n  var idB = b.id.toUpperCase(); // ignore upper and lowercase\n  if (idA < idB) {\n    return 1;\n  }\n  if (idA > idB) {\n    return -1;\n  }\n  // names must be equal\n  return 0;\n});\n\n\nvar sorted  =  true;\n for  (var item=0;item<=arrayOfProperties.length-1;item++) \n {\n       if(propertySorted[item].name.toUpperCase() != arrayOfProperties[item].name.toUpperCase())\n   {\n     sorted = false;\n     tests[\"Test1: Sort failed. Element \" + item +\", \"+ arrayOfProperties[item].name +\", does not equal sorted value, \"+ propertySorted[item].name] = sorted;\n   }\n}\nif(sorted){\n    tests[\"Test1: Sort Passed\"]=sorted\n}\n\n\n// USE FAKE TEST FOR DEBUGGING\n/*\n\ntests[\"Sorted Element 1 = \" + propertySorted[0].name] = true;           // debug message\ntests[\"Property Element 1= \" + arrayOfProperties[0].name] = true; \ntests[\"Sorted Element 2 = \" + propertySorted[1].name] = true;          // debug message\ntests[\"Sorted Element 3 = \" + propertySorted[2].name] = true;          // debug message\n*/\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463524060849,
			"name": "IS-251 Property copy",
			"description": "IS-251 Property Endpoint\nNo sorting specified",
			"collectionId": "eec588d8-cb7f-f426-377e-bd2ceadc1449",
			"responses": []
		},
		{
			"id": "609172d6-4dfd-5f85-275e-7ddebf7f7027",
			"headers": "Accept: application/json\nContent-Type: application/json\n",
			"url": "{{Client_URI}}/client?limit={{limit4}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "var jsonData=JSON.parse(responseBody);\r\nvar arrayOfClients=jsonData.data;\r\nif (environment.limit4>100)\r\n   tests[\"Test1: Test case : limit Greater than 100(max) / limit = \"+environment.limit4 + \" /Elements Returned :  \" + arrayOfClients.length ]=arrayOfClients.length == 100;\r\nelse if (environment.limit4 <=0)\r\n    tests[\"Test1: Test case : limit lesser than 1(min). \"+arrayOfClients.length ]=arrayOfClients.length == 25; \r\nelse \r\n    tests[\"Test1: Test case : Valid limit (limit : 1-100) \"+arrayOfClients.length ]=arrayOfClients.length == environment.limit4;\r\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463420034499,
			"name": "IS_107_TC7 limit_ -20",
			"description": "",
			"collectionId": "eec588d8-cb7f-f426-377e-bd2ceadc1449"
		},
		{
			"id": "6aafd4e8-6e77-9fdc-9396-37e7cbd671c0",
			"headers": "Content-Type: application/json\nAccept: application/json\n",
			"url": "{{Client_URI}}/client/{{clientId}}/property/999999",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "//Validation for Response Code 404 when an invalid property ID\ntests[\"Test7 GET Property: Client ID is 404 not found\"] = responseCode.code === 404;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463517754938,
			"name": "IS-251 Property by ID not found",
			"description": "",
			"collectionId": "eec588d8-cb7f-f426-377e-bd2ceadc1449",
			"responses": []
		},
		{
			"id": "958f5c71-68b8-ec15-f28b-5c3476aa428c",
			"headers": "Accept: application/json\n",
			"url": "{{Client_URI}}/client/{{clientId}}/property",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "//Get Client ID to use in other test\nvar arrayOfProperties=JSON.parse(responseBody);\nvar propertySorted=JSON.parse(responseBody);\n\n//TC:Validation for Response Code 200\ntests[\"Test1 GET Property: Status code is 200\"] = responseCode.code === 200;\n\n//TC3:Validation of Schema\nvar schema = {\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\", \n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"name\": {\n        \"type\": \"string\"\n      },\n/*\nTODO: Add Null and String Check\n      \"status\": {\n        \"type\": \"null\"\n      }\n*/      \n    },\n    \"required\": [\n      \"id\",\n      \"name\",\n      \"status\"\n    ]\n  }\n}\ntests[\"Test2: Response has the correct json schema\"] = tv4.validate(arrayOfProperties, schema);\n\n// Used to get PropertyId for future test\npostman.setEnvironmentVariable(\"propertyId\", arrayOfProperties[0].id);\n\n// Sorting Test TODO: May need to improve for charcter like \"-\", \".\"\npropertySorted.sort(function(a, b) {\n  var nameA = a.name.toUpperCase(); // ignore upper and lowercase\n  var nameB = b.name.toUpperCase(); // ignore upper and lowercase\n  if (nameA < nameB) {\n    return -1;\n  }\n  if (nameA > nameB) {\n    return 1;\n  }\n  // names must be equal\n  return 0;\n});\n\n\nvar sorted  =  true;\n for  (var item=0;item<=arrayOfProperties.length-1;item++) \n {\n       if(propertySorted[item].name.toUpperCase() != arrayOfProperties[item].name.toUpperCase())\n   {\n     sorted = false;\n     tests[\"Test4: Sort failed. Element \" + item +\", \" +arrayOfProperties[item].name+ \", does not equal sorter value, \" + propertySorted[item].name] = sorted;\n   }\n}\nif(sorted){\n    tests[\"Test4: Sort Passed\"]=sorted\n}\n\n\n// USE FAKE TEST FOR DEBUGGING\n/*\n\ntests[\"Sorted Element 1 = \" + propertySorted[0].name] = true;           // debug message\ntests[\"Property Element 1= \" + arrayOfProperties[0].name] = true; \ntests[\"Sorted Element 2 = \" + propertySorted[1].name] = true;          // debug message\ntests[\"Sorted Element 3 = \" + propertySorted[2].name] = true;          // debug message\n*/\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463524127081,
			"name": "IS-251 Property",
			"description": "IS-251 Property Endpoint\nNo sorting specified",
			"collectionId": "eec588d8-cb7f-f426-377e-bd2ceadc1449",
			"responses": []
		},
		{
			"id": "9ebb94e3-97a4-cf75-67ec-1df439932843",
			"headers": "Accept: application/json\nContent-Type: application/json\n",
			"url": "{{Client_URI}}//client?offset={{offset3}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "var jsonData=JSON.parse(responseBody);\r\nvar arrayOfClients=jsonData.data;\r\nif (environment.offset3>=1498)\r\n   tests[\"Test1: The array is empty. There are \"+arrayOfClients.length +\" Elements\" ]=arrayOfClients.length===0;\r\nelse \r\n    tests[\"Test1: There are \"+arrayOfClients.length +\" Elements\" ]=arrayOfClients.length;\r\n\r\n\r\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463419972620,
			"name": "IS-107_TC1_Offset_value_within_records_limit",
			"description": "",
			"collectionId": "eec588d8-cb7f-f426-377e-bd2ceadc1449"
		},
		{
			"id": "aabaf209-d332-45fc-5903-b4ddbb46e09d",
			"headers": "Accept: application/json\n",
			"url": "{{Client_URI}}/client?limit={{limit6}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "var jsonData=JSON.parse(responseBody);\r\nvar arrayOfClients=jsonData.data;\r\nif (environment.limit6>100)\r\n   tests[\"Test1: Test case : limit Greater than 100(max) / limit = \"+environment.limit6 + \" /Elements Returned :  \" + arrayOfClients.length ]=arrayOfClients.length == 100;\r\nelse if (environment.limit6 <=0)\r\n    tests[\"Test1: Test case : limit lesser than 1(min). \"+arrayOfClients.length ]=arrayOfClients.length == 25; \r\nelse \r\n    tests[\"Test1: Test case : Valid limit (limit : 1-100) \"+arrayOfClients.length ]=arrayOfClients.length == environment.limit6;\r\n\r\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463420051483,
			"name": "IS_107_TC9 limit_60",
			"description": "",
			"collectionId": "eec588d8-cb7f-f426-377e-bd2ceadc1449"
		},
		{
			"id": "c6c05a51-9fdc-b082-a433-f472f83d5343",
			"headers": "Accept: application/json\n",
			"url": "{{Client_URI}}/client?limit={{limit3}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "var jsonData=JSON.parse(responseBody);\r\nvar arrayOfClients=jsonData.data;\r\nif (environment.limit3>100)\r\n   tests[\"Test1: Test case : limit Greater than 100(max) / limit = \"+environment.limit3 + \" /Elements Returned :  \" + arrayOfClients.length ]=arrayOfClients.length == 100;\r\nelse if (environment.limit3 <=0)\r\n    tests[\"Test1: Test case : limit lesser than 1(min). \"+arrayOfClients.length ]=arrayOfClients.length == 25; \r\nelse \r\n    tests[\"Test1: Test case : Valid limit (limit : 1-100) \"+arrayOfClients.length ]=arrayOfClients.length == environment.limit3;\r\n\r\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463420021317,
			"name": "IS_107_TC6 limit_150",
			"description": "",
			"collectionId": "eec588d8-cb7f-f426-377e-bd2ceadc1449"
		},
		{
			"id": "d72834ed-b993-e77b-ab6a-143172c23975",
			"headers": "",
			"url": "{{Client_URI}}/client/{{clientId}}/property",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "//TC:Validation for Response Code\ntests[\"Test2: Status code is 406\"] = responseCode.code === 406;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463515899164,
			"name": "IS-251 Property:  Response 406",
			"description": "IS-251 Property:Response 406 is returned",
			"collectionId": "eec588d8-cb7f-f426-377e-bd2ceadc1449",
			"responses": []
		},
		{
			"id": "dfd80586-fb41-e683-ca3a-7b9cee578cf4",
			"headers": "Content-Type: application/json\nAccept: application/json\n",
			"url": "{{Client_URI}}/client/{{clientId}}/property/{{propertyId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "//TC:Validation for Response Code 200\ntests[\"Test1 GET Property: Status code is 200\"] = responseCode.code === 200;\n\n//TC4:Validation of Schema for specific property\nvar schema = {\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    },\n// TODO: Add test to allow null and string in schema    \n    \"status\": {\n      \"type\": \"null\"\n    }\n  },\n  \"required\": [\n    \"id\",\n    \"name\",\n    \"status\"\n  ]\n}\nvar jsonData = JSON.parse(responseBody);\ntests[\"Test1: Response has the correct json schema\"] = tv4.validate(jsonData, schema);\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463517727375,
			"name": "IS-251 Property by ID",
			"description": "IS-251 Property Endpoint TC3 Validate Schema",
			"collectionId": "eec588d8-cb7f-f426-377e-bd2ceadc1449",
			"responses": []
		}
	]
}
